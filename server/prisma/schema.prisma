// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  userId       Int     @id @default(autoincrement())
  firstName    String
  lastName     String
  mobileNumber String  @unique
  emailId      String
  userType     String
  password     String
  events       Event[]
}

model Event {
  eventId       Int             @id @default(autoincrement())
  userId        Int
  eventType     String
  user          User            @relation(fields: [userId], references: [userId])
  eventData     EventData?
  PhotoCategory PhotoCategory[]
  Relative      Relative[]
  RelativePhoto RelativePhoto[]
}

model EventData {
  eventDataId       Int             @id @default(autoincrement())
  eventId           Int             @unique
  eventName         String
  eventDate         DateTime
  eventTime         DateTime
  groomName         String
  brideName         String
  specialPersonName String
  place             String
  address           String
  photoCategories   PhotoCategory[]
  relativePhotos    RelativePhoto[]
  relatives         Relative[]
  event             Event           @relation(fields: [eventId], references: [eventId])
}

model PhotoCategory {
  categoryId           Int        @id @default(autoincrement())
  categoryName         String // e.g., "Invitation", "Event Photos", "Relatives"
  eventId              Int
  event                Event      @relation(fields: [eventId], references: [eventId])
  photos               Photo[]
  EventData            EventData? @relation(fields: [eventDataEventDataId], references: [eventDataId])
  eventDataEventDataId Int?
}

model Photo {
  photoId       Int             @id @default(autoincrement())
  googleDriveId String // Google Drive File ID
  categoryId    Int
  category      PhotoCategory   @relation(fields: [categoryId], references: [categoryId])
  RelativePhoto RelativePhoto[]
}

model Relative {
  relativeId           Int             @id @default(autoincrement())
  name                 String
  mobileNumber         String
  eventId              Int
  event                Event           @relation(fields: [eventId], references: [eventId])
  photos               RelativePhoto[]
  EventData            EventData?      @relation(fields: [eventDataEventDataId], references: [eventDataId])
  eventDataEventDataId Int?
}

model RelativePhoto {
  id                   Int        @id @default(autoincrement())
  relativeId           Int
  relative             Relative   @relation(fields: [relativeId], references: [relativeId])
  eventId              Int
  event                Event      @relation(fields: [eventId], references: [eventId])
  photoId              Int
  photo                Photo      @relation(fields: [photoId], references: [photoId])
  EventData            EventData? @relation(fields: [eventDataEventDataId], references: [eventDataId])
  eventDataEventDataId Int?
}
